apiVersion: apps/v1
kind: Deployment
metadata:
  name: sanic-app-deployment # Deployment名称
  labels: # 标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组
    app: sanic-app # Deployment标签
spec:
  replicas: 4
  selector:
    matchLabels:
      app: sanic-app # 匹配Pod标签
  strategy:
    rollingUpdate:
      maxSurge: 2 # 滚动更新时最大可超出的副本数
      maxUnavailable: 0 # 滚动更新时最大不可用副本数
    type: RollingUpdate # 滚动更新策略（避免服务中断）
  template:
    metadata:
      labels:
        app: sanic-app # Pod标签
    spec:
      containers:
        - name: sanic-app-container
          image: yxy1109/k8s-sanic:latest # dockerhub镜像
          ports:
            - containerPort: 8000 # 容器端口
          resources: # 资源限制
            requests: # 最小资源
              cpu: "200m"
              memory: "256Mi"
            limits: #最大资源
              cpu: "500m"
              memory: "512Mi"
          # 启动探针（startupProbe）
          # 作用：在应用完全启动好之前，不会让存活探针和就绪探针去干扰
          # 适用场景：启动时间不确定或可能很长的应用
          startupProbe:
            httpGet:
              path: /health
              port: 8000
            failureThreshold: 30   # 失败多少次才认定启动失败
            periodSeconds: 5      # 每 5 秒检查一次，加快启动检测
            timeoutSeconds: 3     # 超时时间 3 秒
          # 存活探针，健康检查（livenessProbe）
          # 作用：运行中检测，如果失败会重启容器
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 15 # 容器启动后延迟 15 秒再开始第一次健康检查
            periodSeconds: 10 # 每次健康检查的间隔时间（秒）
            timeoutSeconds: 3 # 探针请求超时时间（秒）
            failureThreshold: 3 # 连续失败多少次后，判定容器不健康
          # 就绪探针（readinessProbe）
          # 作用：只有成功时，Pod 才会进入 Ready 状态，Service 才会转发流量
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 5 # 启动后延迟 5 秒开始第一次检查
            periodSeconds: 5  # 每 5 秒检查一次，提高就绪检测频率
            timeoutSeconds: 3  # 超时时间 3 秒
            failureThreshold: 2 # 连续失败 2 次判定不就绪